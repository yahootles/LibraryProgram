/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package at.libraryprogram;

import java.awt.Color;
import java.awt.Image;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.text.Document;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.ArrayList;
import java.util.Set;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author tiein
 */
public class LibraryForm extends javax.swing.JFrame {

    /**
     * Creates new form LibraryForm
     */
    boolean searching;

    String prevSearchFieldText;

    Color greySearchColour;

    ArrayList<Book> titleSortedList;
    ArrayList<Book> displayList;

    public LibraryForm() {
        initComponents();

        greySearchColour = new Color(153, 153, 153);

        searchButton.setIcon(resizeIcon((ImageIcon) searchButton.getIcon(), searchButton.getWidth() * 3 / 4, searchButton.getHeight() * 3 / 4));
        addButton.setIcon(resizeIcon((ImageIcon) addButton.getIcon(), addButton.getWidth() * 3 / 4, addButton.getHeight() * 3 / 4));
        delButton.setIcon(resizeIcon((ImageIcon) delButton.getIcon(), delButton.getWidth() * 3 / 4, delButton.getHeight() * 3 / 4));

        DocumentListener documentListener = new DocumentListener() {
            public void changedUpdate(DocumentEvent documentEvent) {
                System.out.println("qqq");
            }

            public void insertUpdate(DocumentEvent documentEvent) {
                searchFieldDocumentInsert(documentEvent);
            }

            public void removeUpdate(DocumentEvent documentEvent) {
                searchFieldDocumentRemove(documentEvent);
            }

        };

        searchField.getDocument().addDocumentListener(documentListener);

        String[] columnTitles = {"Title", "Author", "Date Released", "Rating", "Date Added"};

        CustomTableModel tModel = new CustomTableModel(columnTitles, 5);
        tModel.setRowCount(0);
        listTable.setModel(tModel);

        load();
        displayList = new ArrayList<Book>(0);

        try {
            for (Book b : titleSortedList) {
                displayList.add(b);
            }
        } catch (NullPointerException npe) {

        }

        System.out.println(new String("ads").compareToIgnoreCase("a"));

        updateTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        listPane = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();
        sortBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        clearSearchButton = new javax.swing.JButton();
        viewEditButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openLibItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Library");
        setPreferredSize(new java.awt.Dimension(810, 578));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        listPane.setViewportView(listTable);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/addIcon.png"))); // NOI18N
        addButton.setToolTipText("Add");
        addButton.setAlignmentY(0.0F);
        addButton.setMaximumSize(new java.awt.Dimension(29, 29));
        addButton.setMinimumSize(new java.awt.Dimension(29, 29));
        addButton.setPreferredSize(new java.awt.Dimension(29, 29));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delIcon.png"))); // NOI18N
        delButton.setToolTipText("Delete");
        delButton.setAlignmentY(0.0F);
        delButton.setMaximumSize(new java.awt.Dimension(29, 29));
        delButton.setMinimumSize(new java.awt.Dimension(29, 29));
        delButton.setPreferredSize(new java.awt.Dimension(29, 29));
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        sortButton.setText("Sort");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        sortBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Author", "Date Released", "Date Added", "Rating" }));

        searchField.setForeground(new java.awt.Color(153, 153, 153));
        searchField.setText("Enter search text...");
        searchField.setToolTipText("");
        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFieldFocusLost(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchFieldKeyPressed(evt);
            }
        });

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/searchIcon.png"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setAlignmentY(0.0F);
        searchButton.setMaximumSize(new java.awt.Dimension(29, 29));
        searchButton.setMinimumSize(new java.awt.Dimension(29, 29));
        searchButton.setPreferredSize(new java.awt.Dimension(29, 29));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        clearSearchButton.setText("Clear Search");
        clearSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSearchButtonActionPerformed(evt);
            }
        });

        viewEditButton.setText("View/Edit");
        viewEditButton.setToolTipText("Delete");
        viewEditButton.setAlignmentY(0.0F);
        viewEditButton.setMaximumSize(new java.awt.Dimension(29, 29));
        viewEditButton.setMinimumSize(new java.awt.Dimension(29, 29));
        viewEditButton.setPreferredSize(new java.awt.Dimension(29, 29));
        viewEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEditButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sortBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearSearchButton))
                    .addComponent(listPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clearSearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sortBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sortButton))
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listPane, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        openLibItem.setText("Open Library");
        fileMenu.add(openLibItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        int selection = sortBox.getSelectedIndex();

        System.out.println("efg");

        Book[] arr = new Book[displayList.size()];

        arr = displayList.toArray(arr);

        quicksort(arr, 0, arr.length - 1, selection);

        for (int i = 0; i < arr.length; i++) {
            displayList.set(i, arr[i]);
        }

        updateTable();
    }//GEN-LAST:event_sortButtonActionPerformed

    private void searchFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER && searchField.hasFocus() && !searchField.getText().equals("")) {
            search();
            mainPanel.requestFocus();
        }
    }//GEN-LAST:event_searchFieldKeyPressed

    private void searchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusLost
        if (searchField.getText().equals("")) {
            searchField.setForeground(greySearchColour);
            searchField.setText("Enter search text...");

        }
    }//GEN-LAST:event_searchFieldFocusLost

    private void searchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusGained
        if (searchField.getText().equals("Enter search text...") && searchField.getForeground().equals(greySearchColour)) {
            searchField.setText("");
            searchField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_searchFieldFocusGained

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        search();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        new addScreen(this).setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        int row = listTable.getSelectedRow();

        int check = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the book?");

        if (row != -1 && check == JOptionPane.YES_OPTION) {
            removeFromList(row);
        }
    }//GEN-LAST:event_delButtonActionPerformed

    private void clearSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSearchButtonActionPerformed
        while (displayList.size() > 0) {
            displayList.remove(0);
        }

        for (Book b : titleSortedList) {
            displayList.add(b);
        }

        searchField.setText("Enter search text...");
        searchField.setForeground(greySearchColour);
        mainPanel.requestFocus();

        updateTable();
    }//GEN-LAST:event_clearSearchButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        save();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void viewEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEditButtonActionPerformed
        if (listTable.getSelectedRow() >= 0) {
            new addScreen(this, listTable.getSelectedRow()).setVisible(true);
        }
    }//GEN-LAST:event_viewEditButtonActionPerformed

    private void searchFieldDocumentInsert(DocumentEvent evt) {
//        if(searchField.getText().length() != 0 && !(searchField.getText().equals("Enter search text...") && searchField.getForeground().equals(greySearchColour))){
//            System.out.println(searchField.getText().length());
//            System.out.println(searchField.getText().equals("Enter search text..."));
//            System.out.println(searchField.getForeground().equals(greySearchColour));
//            
//            hybridSearch();
//        }else{
//            System.out.println(searchField.getText().length());
//            System.out.println(searchField.getText().equals("Enter search text..."));
//            System.out.println(searchField.getForeground().equals(greySearchColour));
//        }
    }

    private void searchFieldDocumentRemove(DocumentEvent evt) {
//        if(searchField.getText().length() != 0 && !(searchField.getText().equals("Enter search text...") && searchField.getForeground().equals(greySearchColour))){
//            System.out.println(searchField.getText().length());
//        }else{
//            
//        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibraryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibraryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibraryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibraryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearSearchButton;
    private javax.swing.JButton delButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane listPane;
    private javax.swing.JTable listTable;
    private javax.swing.JLayeredPane mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openLibItem;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> sortBox;
    private javax.swing.JButton sortButton;
    private javax.swing.JButton viewEditButton;
    // End of variables declaration//GEN-END:variables

    public static Icon resizeIcon(ImageIcon icon, int resizedWidth, int resizedHeight) {
        Image img = icon.getImage();
        Image resizedImage = img.getScaledInstance(resizedWidth, resizedHeight, java.awt.Image.SCALE_SMOOTH);
        return new ImageIcon(resizedImage);
    }

    private void quicksort(Book[] arr, int low, int high, int param) {
        if (low < high) {
            int border = partition(arr, low, high, param);
            quicksort(arr, low, border, param);
            quicksort(arr, border + 1, high, param);
        }
    }

    private int partition(Book[] arr, int low, int high, int param) {
        int mid = (int) Math.floor((low + high) / 2);
        int i = low;
        int j = high;

        for (;;) {
            while (arr[i].getVar(param).compareToIgnoreCase(arr[mid].getVar(param)) < 0) {
                i++;
            }

            while (arr[j].getVar(param).compareToIgnoreCase(arr[mid].getVar(param)) > 0) {
                j--;
            }

            if (i >= j) {
                return j;
            }

            Book temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;

            i++;
            j--;
        }
    }

    private int[] hybridSearch() {
        String searchFieldText = searchField.getText();

        String[] searchArr = searchFieldText.split("[,\\.!\\?\\s]+");
        String searchConcat = "";

        for (String s : searchArr) {
            searchConcat += s;
        }

        int binTerm = binSearch(searchConcat, 0, titleSortedList.size() - 1);

        int firstFound, lastFound;

        if (binTerm != -1) {
            System.out.println("binTerm: " + binTerm + "      String at binTerm: " + titleSortedList.get(binTerm).getTitle());
            firstFound = findFirst(searchConcat, binTerm);
            System.out.println("firstFound: " + firstFound);
            lastFound = findLast(searchConcat, firstFound);
            System.out.println("lastFound:" + lastFound);

            //System.out.println(firstFound + "     " + lastFound);
            int[] ret = {firstFound, lastFound};
            return ret;
        } else {
            int[] ret = {-1, -1};
            return ret;
        }
    }

    private int binSearch(String searchTerm, int l, int h) {
        int lo = l;
        int hi = h;

        int mid = l + (h - l) / 2;

        while (lo <= hi) {
            //System.out.println(lo + " " + mid + " " + hi);
            String[] tempArr = titleSortedList.get(mid).getTitle().substring(0, Math.min(searchTerm.length(), titleSortedList.get(mid).getTitle().length())).split("[,\\.!\\?\\s]+");
            String compConcat = "";

            for (String s : tempArr) {
                compConcat += s;
            }

            int test = searchTerm.compareToIgnoreCase(compConcat);

            //System.out.println(searchTerm + "     " + compConcat + "     " + lo + "     " + mid + "     " + hi + "     " + test);
            if (test == 0) {

                return mid;

            } else if (test > 0) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
            mid = lo + (hi - lo) / 2;

        }
        return -1;
    }

    private int findFirst(String search, int known) {
        int cur = known;
        System.out.println("cur: " + cur);

        if (cur == 0) {
            return 0;
        }

        while (cur > 0) {
            String[] tempArr = titleSortedList.get(cur - 1).getTitle().substring(0, Math.min(search.length(), titleSortedList.get(cur - 1).getTitle().length())).split("[,\\.!\\?\\s]+");

            String compConcat = "";

            for (String s : tempArr) {
                compConcat += s;
            }

            System.out.println("cur: " + cur);

            if (search.equalsIgnoreCase(compConcat)) {
                cur--;
            } else {
                return cur;
            }

        }
        return cur;
    }

    private int findLast(String search, int first) {
        int cur = first;

        if (cur == titleSortedList.size() - 1) {
            return titleSortedList.size() - 1;
        }

        while (cur < titleSortedList.size() - 1) {
            String[] tempArr = titleSortedList.get(cur + 1).getTitle().substring(0, Math.min(search.length(), titleSortedList.get(cur + 1).getTitle().length())).split("[,\\.!\\?\\s]+");

            String compConcat = "";

            for (String s : tempArr) {
                compConcat += s;
            }

            if (search.equalsIgnoreCase(compConcat)) {
                cur++;
            } else {
                return cur;
            }
        }
        return cur;
    }

    public void addBookToList(Book b) {

        try {
            titleSortedList.add(b);

            Book[] arr = new Book[titleSortedList.size()];

            arr = titleSortedList.toArray(arr);

            quicksort(arr, 0, arr.length - 1, 0);

            for (int i = 0; i < arr.length; i++) {
                titleSortedList.set(i, arr[i]);
            }
        } catch (NullPointerException npe) {
            titleSortedList = new ArrayList<Book>(0);
            titleSortedList.add(b);
        }

        displayList.add(b);
        updateTable();

        for (Book bo : titleSortedList) {
            System.out.println(bo.getTitle());
        }

    }

    private void updateTable() {
        CustomTableModel tabMod = (CustomTableModel) listTable.getModel();

        while (tabMod.getRowCount() > 0) {
            tabMod.removeRow(0);
            listTable.revalidate();
        }

        for (Book b : displayList) {
            String[] data = {b.getVar(0), b.getVar(1), b.getVar(2), String.valueOf(b.getRating()), b.getVar(3)};
            tabMod.addRow(data);
            listTable.revalidate();
        }
    }

    private void search() {
        int[] results = hybridSearch();

        while (displayList.size() > 0) {
            displayList.remove(0);
        }

        if (results[0] != -1) {
            for (int i = results[0]; i <= results[1]; i++) {
                //System.out.println(i);
                //System.out.println(titleSortedList.get(i).getTitle());
                displayList.add(titleSortedList.get(i));
            }
        }

        updateTable();
    }

    private void save() {
        try {
            //set up outpu streams
            FileOutputStream fileOut = new FileOutputStream("data.dat", false);
            ObjectOutputStream obOut = new ObjectOutputStream(fileOut);

            //write the array to the file
            obOut.writeObject(titleSortedList);

            //flush and close outputs
            obOut.flush();
            obOut.close();
            fileOut.flush();
            fileOut.close();
        } catch (FileNotFoundException fnfe) {
            System.out.println("An error has occured.");
            System.err.println("Exception:" + fnfe);
        } catch (IOException ioe) {
            System.out.println("An error has occured.");
            System.err.println("Exception:" + ioe);
        }
    }

    private void load() {
        try {
            //set up input streams
            FileInputStream fileIn = new FileInputStream("data.dat");
            ObjectInputStream obIn = new ObjectInputStream(fileIn);

            //read in an array of Characters
            titleSortedList = (ArrayList<Book>) obIn.readObject();

            //close inputs
            obIn.close();
            fileIn.close();
        } catch (IOException ioe) {
            System.out.println("An error has occured.");
            System.err.println("Exception:" + ioe);
        } catch (ClassNotFoundException cnfe) {
            System.out.println("An error has occured.");
            System.err.println("Exception:" + cnfe);
        }
    }

    public void removeFromList(int ind) {
        Book test = displayList.get(ind);

        String[] splitTitle = test.getTitle().split("[,\\.!\\?\\s]+");
        String concatTitle = "";

        for (String s : splitTitle) {
            concatTitle += s;
        }

        titleSortedList.remove(binSearch(concatTitle, 0, titleSortedList.size() - 1));
        displayList.remove(ind);
        updateTable();
    }

}
